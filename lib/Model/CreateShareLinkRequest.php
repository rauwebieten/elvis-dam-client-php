<?php
/**
 * CreateShareLinkRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Elvis REST API
 *
 * <h3>BETA NOTICE</h3> <div class=\"beta-notice\">This API is still in development. All API methods are functional, they are however subject to change in future Elvis versions.</div> <h3>Intro</h3> <div class=\"intro\">The Elvis REST API allows you to customize and integrate external applications with Elvis. Some examples of what you can do with the API:</div> <ul><li>Search assets.</li> <li>Download assets, previews, or other renditions.</li>  <li>Upload new assets.</li>  <li>Change asset metadata.</li>  <li>Search, create, rename and delete folders.</li>  <li>Create Shared Links.</li>  </ul><h3>Try out API methods</h3> On this page, you can try out new API methods. Before you can try them out, authorization is required. There is no authorization method in this API (yet), this means we will use the old API auth method:<br/><br/> 1. Authenticate using <span class=\"inline-code\">/services/apilogin</span> For example:<br/><br/> <pre>curl -X POST http://localhost:8080/services/apilogin -F username=admin -F password=changemenow</pre><br/> 2. Copy the authToken.<br/> 3. Click the Authorize button and use 'Bearer &lt;authToken&gt;' as value.<br/> 4. Click Authorize, the page is now authorized and you can try out the API methods.
 *
 * OpenAPI spec version: 3.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateShareLinkRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateShareLinkRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateShareLinkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shared_asset_ids' => 'string[]',
        'shared_container_id' => 'string',
        'upload_folder_path' => 'string',
        'subject' => 'string',
        'description' => 'string',
        'valid_until' => '\DateTime',
        'query' => 'string',
        'request_upload' => 'bool',
        'request_approval' => 'bool',
        'notify_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shared_asset_ids' => null,
        'shared_container_id' => null,
        'upload_folder_path' => null,
        'subject' => null,
        'description' => null,
        'valid_until' => 'date-time',
        'query' => null,
        'request_upload' => null,
        'request_approval' => null,
        'notify_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shared_asset_ids' => 'sharedAssetIds',
        'shared_container_id' => 'sharedContainerId',
        'upload_folder_path' => 'uploadFolderPath',
        'subject' => 'subject',
        'description' => 'description',
        'valid_until' => 'validUntil',
        'query' => 'query',
        'request_upload' => 'requestUpload',
        'request_approval' => 'requestApproval',
        'notify_email' => 'notifyEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shared_asset_ids' => 'setSharedAssetIds',
        'shared_container_id' => 'setSharedContainerId',
        'upload_folder_path' => 'setUploadFolderPath',
        'subject' => 'setSubject',
        'description' => 'setDescription',
        'valid_until' => 'setValidUntil',
        'query' => 'setQuery',
        'request_upload' => 'setRequestUpload',
        'request_approval' => 'setRequestApproval',
        'notify_email' => 'setNotifyEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shared_asset_ids' => 'getSharedAssetIds',
        'shared_container_id' => 'getSharedContainerId',
        'upload_folder_path' => 'getUploadFolderPath',
        'subject' => 'getSubject',
        'description' => 'getDescription',
        'valid_until' => 'getValidUntil',
        'query' => 'getQuery',
        'request_upload' => 'getRequestUpload',
        'request_approval' => 'getRequestApproval',
        'notify_email' => 'getNotifyEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shared_asset_ids'] = isset($data['shared_asset_ids']) ? $data['shared_asset_ids'] : null;
        $this->container['shared_container_id'] = isset($data['shared_container_id']) ? $data['shared_container_id'] : null;
        $this->container['upload_folder_path'] = isset($data['upload_folder_path']) ? $data['upload_folder_path'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['valid_until'] = isset($data['valid_until']) ? $data['valid_until'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['request_upload'] = isset($data['request_upload']) ? $data['request_upload'] : null;
        $this->container['request_approval'] = isset($data['request_approval']) ? $data['request_approval'] : null;
        $this->container['notify_email'] = isset($data['notify_email']) ? $data['notify_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['valid_until'] === null) {
            $invalidProperties[] = "'valid_until' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shared_asset_ids
     *
     * @return string[]
     */
    public function getSharedAssetIds()
    {
        return $this->container['shared_asset_ids'];
    }

    /**
     * Sets shared_asset_ids
     *
     * @param string[] $shared_asset_ids shared_asset_ids
     *
     * @return $this
     */
    public function setSharedAssetIds($shared_asset_ids)
    {
        $this->container['shared_asset_ids'] = $shared_asset_ids;

        return $this;
    }

    /**
     * Gets shared_container_id
     *
     * @return string
     */
    public function getSharedContainerId()
    {
        return $this->container['shared_container_id'];
    }

    /**
     * Sets shared_container_id
     *
     * @param string $shared_container_id shared_container_id
     *
     * @return $this
     */
    public function setSharedContainerId($shared_container_id)
    {
        $this->container['shared_container_id'] = $shared_container_id;

        return $this;
    }

    /**
     * Gets upload_folder_path
     *
     * @return string
     */
    public function getUploadFolderPath()
    {
        return $this->container['upload_folder_path'];
    }

    /**
     * Sets upload_folder_path
     *
     * @param string $upload_folder_path upload_folder_path
     *
     * @return $this
     */
    public function setUploadFolderPath($upload_folder_path)
    {
        $this->container['upload_folder_path'] = $upload_folder_path;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject for the Share Link. Visible to anyone who views the Share Link.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Optional: Description for the Share Link. Visible to anyone who views the Share Link.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime $valid_until The expiration time of the Share Link, ISO 8601 formatted. Must be in the future.
     *
     * @return $this
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query Display assets in the Share Link based on a query. Conditionally required: Either sharedAssetIds, query or sharedContainerId must be specified or requestUpload must be true.
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets request_upload
     *
     * @return bool
     */
    public function getRequestUpload()
    {
        return $this->container['request_upload'];
    }

    /**
     * Sets request_upload
     *
     * @param bool $request_upload Allow the person that views the Share Link to upload files. The files will automatically be uploaded to the uploadFolderPath that you specify. Conditionally required: Either sharedAssetIds, query or sharedContainerId must be specified or requestUpload must be true.
     *
     * @return $this
     */
    public function setRequestUpload($request_upload)
    {
        $this->container['request_upload'] = $request_upload;

        return $this;
    }

    /**
     * Gets request_approval
     *
     * @return bool
     */
    public function getRequestApproval()
    {
        return $this->container['request_approval'];
    }

    /**
     * Sets request_approval
     *
     * @param bool $request_approval Optional: Request the person who views the Share Link to approve or reject the shared files.
     *
     * @return $this
     */
    public function setRequestApproval($request_approval)
    {
        $this->container['request_approval'] = $request_approval;

        return $this;
    }

    /**
     * Gets notify_email
     *
     * @return string
     */
    public function getNotifyEmail()
    {
        return $this->container['notify_email'];
    }

    /**
     * Sets notify_email
     *
     * @param string $notify_email Optional: Supplied email address will receive notifications for uploads and/or approvals within the Share Link.
     *
     * @return $this
     */
    public function setNotifyEmail($notify_email)
    {
        $this->container['notify_email'] = $notify_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


